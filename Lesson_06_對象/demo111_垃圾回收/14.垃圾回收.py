# 就像我們生活中會產生垃圾一樣，程序在運行過程當中也會產生垃圾
# 程序運行過程中產生的垃圾會影響到程序的運行的運行性能，所以這些垃圾必須被及時清理
# 沒用的東西就是垃圾
# 在程序中沒有被引用的對象就是垃圾，這種垃圾對象過多以後會影響到程序的運行的性能
#   所以我們必須進行及時的垃圾回收，所謂的垃圾回收就是講垃圾對像從內存中刪除
# 在Python中有自動的垃圾回收機制，它會自動將這些沒有被引用的對象刪除，
#   所以我們不用手動處理垃圾回收

class A:
    def __init__(self):
        self.name = 'A類'

    # del是一個特殊方法，它會在對像被垃圾回收前調用
    def __del__(self):
        print('A()對像被刪除了~~~',self)

a = A()
b = a # 又使用一個變量b，來引用a對應的對象

print(a.name)

# a = None # 將a設置為了None，此時沒有任何的變量對A()對象進行引用，它就是變成了垃圾
# b = None
# del a
# del b
input('回車鍵退出...')