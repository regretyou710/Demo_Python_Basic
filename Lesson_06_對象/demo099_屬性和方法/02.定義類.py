# 嘗試定義一個表示人的類
class Person :
    # 在類的代碼塊中，我們可以定義變量和函數
    # 在類中我們所定義的變量，將會成為所有的實例的公共屬性
    # 所有實例都可以訪問這些變量
    name = 'swk' # 公共屬性，所有實例都可以訪問

    # 在類中也可以定義函數，類中的定義的函數，我們稱為方法
    # 這些方法可以通過該類的所有實例來訪問
    
    def say_hello(self) :
        # 方法每次被調用時，解析器都會自動傳遞第一個實參
        # 第一個參數，就是調用方法的對象本身，
        #   如果是p1調的，則第一個參數就是p1對象
        #   如果是p2調的，則第一個參數就是p2對象
        # 一般我們都會將這個參數命名為self

        # say_hello()這個方法，可以顯示如下格式的數據：
        #   你好！我是 xxx
        #   在方法中不能直接訪問類中的屬性
        print('你好！我是 %s' %self.name)

# 創建Person的實例
p1 = Person()
p2 = Person()

# print(p2.name)

# 調用方法，對象.方法名()
# 方法調用和函數調用的區別
# 如果是函數調用，則調用時傳幾個參數，就會有幾個實參
# 但是如果是方法調用，默認傳遞一個參數，所以方法中至少要定義一個形參


# 修改p1的name屬性
p1.name = '豬八戒'
p2.name = '沙和尚'

p1.say_hello() # '你好！我是 豬八戒'
p2.say_hello() # '你好！我是 沙和尚'

# del p2.name # 刪除p2的name屬性

# print(p1.name) 
# print(p2.name)