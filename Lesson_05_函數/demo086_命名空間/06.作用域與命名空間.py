# 作用域（scope）
# 作用域指的是變量生效的區域
b = 20 # 全局變量

def fn():
    a = 10 # a定義在了函數內部，所以他的作用域就是函數內部，函數外部無法訪問
    print('函數內部：','a =',a)
    print('函數內部：','b =',b)

# fn()    
  

# print('函數外部：','a =',a)
# print('函數外部：','b =',b)

# 在Python中一共有兩種作用域
#  全局作用域
#   - 全局作用域在程序執行時創建，在程序執行結束時銷毀
#   - 所有函數以外的區域都是全局作用域
#   - 在全局作用域中定義的變量，都屬於全局變量，全局變量可以在程序的任意位置被訪問
#   
#  函數作用域
#   - 函數作用域在函數調用時創建，在調用結束時銷毀
#   - 函數每調用一次就會產生一個新的函數作用域
#   - 在函數作用域中定義的變量，都是局部變量，它只能在函數內部被訪問
#   
#  變量的查找
#   - 當我們使用變量時，會優先在當前作用域中尋找該變量，如果有則使用，
#       如果沒有則繼續去上一級作用域中尋找，如果有則使用，
#       如果依然沒有則繼續去上一級作用域中尋找，以此類推
#       直到找到全局作用域，依然沒有找到，則會拋出異常
#           NameError: name 'a' is not defined

def fn2():
    def fn3():
        print('fn3中:','a =',a)
    fn3()

# fn2()    

a = 20

def fn3():
    # a = 10 # 在函數中為變量賦值時，默認都是為局部變量賦值
    # 如果希望在函數內部修改全局變量，則需要使用global關鍵字，來聲明變量
    global a # 聲明在函數內部的使用a是全局變量，此時再去修改a時，就是在修改全局的a
    a = 10 # 修改全局變量
    print('函數內部：','a =',a)

# fn3()
# print('函數外部：','a =',a)


# 命名空間（namespace）
# 命名空間指的是變量存儲的位置，每一個變量都需要存儲到指定的命名空間當中
# 每一個作用域都會有一個它對應的命名空間
# 全局命名空間，用來保存全局變量。函數命名空間用來保存函數中的變量
# 命名空間實際上就是一個字典，是一個專門用來存儲變量的字典

# locals()用來獲取當前作用域的命名空間
# 如果在全局作用域中調用locals()則獲取全局命名空間，如果在函數作用域中調用locals()則獲取函數命名空間
# 返回的是一個字典
scope = locals() # 當前命名空間
print(type(scope))
# print(a)
# print(scope['a'])
# 向scope中添加一個key-value
scope['c'] = 1000 # 向字典中添加key-value就相當於在全局中創建了一個變量（一般不建議這麼做）
# print(c)

def fn4():
    a = 10
    # scope = locals() # 在函數內部調用locals()會獲取到函數的命名空間
    # scope['b'] = 20 # 可以通過scope來操作函數的命名空間，但是也是不建議這麼做

    # globals() 函數可以用來在任意位置獲取全局命名空間
    global_scope = globals()
    # print(global_scope['a'])
    global_scope['a'] = 30
    # print(scope)

fn4()