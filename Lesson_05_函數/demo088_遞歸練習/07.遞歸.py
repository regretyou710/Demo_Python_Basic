# 嘗試求10的階乘（10!）
# 1! = 1
# 2! = 1*2 = 2
# 3! = 1*2*3 = 6
# 4! = 1*2*3*4 = 24

# print(1*2*3*4*5*6*7*8*9*10)

# 創建一個變量保存結果
# n = 10
# for i in range(1,10):
#     n *= i

# print(n)

# 創建一個函數，可以用來求任意數的階乘
def factorial(n):
    '''
        該函數用來求任意數的階乘

        參數：
            n 要求階乘的數字
    '''

    # 創建一個變量，來保存結果
    result = n
    
    for i in range(1,n):
        result *= i

    return result    

# 求10的階乘    
# print(factorial(20))

# 遞歸式的函數
# 從前有座山，山里有座廟，廟裡有個老和尚講故事，講的什麼故事呢？
#   從前有座山，山里有座廟，廟裡有個老和尚講故事，講的什麼故事呢？ ....
# 遞歸簡單理解就是自己去引用自己！
# 遞歸式函數，在函數中自己調用自己！

# 無窮遞歸，如果這個函數被調用，程序的內存會溢出，效果類似於死循環
# def fn():
#     fn()
# fn()

# 遞歸是解決問題的一種方式，它和循環很像
#   它的整體思想是，將一個大問題分解為一個個的小問題，直到問題無法分解時，再去解決問題
# 遞歸式函數的兩個要件
#   1.基線條件
#       - 問題可以被分解為的最小問題，當滿足基線條件時，遞歸就不在執行了
#   2.遞歸條件
#       - 將問題繼續分解的條件
# 遞歸和循環類似，基本是可以互相代替的，
#   循環編寫起來比較容易，閱讀起來稍難
#   遞歸編寫起來難，但是方便閱讀
# 10! = 10 * 9!
# 9! = 9 * 8!
# 8! = 8 * 7!
# ...
# 1! = 1

def factorial(n):
    '''
        該函數用來求任意數的階乘

        參數：
            n 要求階乘的數字
    '''
    # 基線條件 判斷n是否為1，如果為1則此時不能再繼續遞歸
    if n == 1 :
        # 1的階乘就是1，直接返回1
        return 1

    # 遞歸條件    
    return n * factorial(n-1)

# print(factorial(10))

# 練習
#   創建一個函數 power 來為任意數字做冪運算 n ** i
#   10 ** 5 = 10 * 10 ** 4
#   10 ** 4 = 10 * 10 ** 3
#   ...
#   10 ** 1 = 10
def power(n , i):
    '''
        power()用來為任意的數字做冪運算

        參數：
            n 要做冪運算的數字
            i 做冪運算的次數
    '''
    # 基線條件
    if i == 1:
        # 求1次冪
        return n
    # 遞歸條件
    return n * power(n , i-1)

# print(power(8,6))    



#   
# 練習
#   創建一個函數，用來檢查一個任意的字符串是否是回文字符串，如果是返回True，否則返回False
#   回文字符串，字符串從前往後念和從後往前念是一樣的
#       abcba
#   abcdefgfedcba
#   先檢查第一個字符和最後一個字符是否一致，如果不一致則不是回文字符串
#       如果一致，則看剩餘的部分是否是回文字符串
#   檢查 abcdefgfedcba 是不是回文
#   檢查 bcdefgfedcb 是不是回文
#   檢查 cdefgfedc 是不是回文
#   檢查 defgfed 是不是回文
#   檢查 efgfe 是不是回文
#   檢查 fgf 是不是回文
#   檢查 g 是不是回文

def hui_wen(s):
    '''
        該函數用來檢查指定的字符串是否回文字符串，如果是返回True，否則返回False

        參數：
            s：就是要檢查的字符串
    '''
    # 基線條件
    if len(s) < 2 :
        # 字符串的長度小於2，則字符串一定是回文
        return True
    elif s[0] != s[-1]:
        # 第一個字符和最後一個字符不相等，不是回文字符串
        return False    
    # 遞歸條件    
    return hui_wen(s[1:-1])

# def hui_wen(s):
#     '''
#         該函數用來檢查指定的字符串是否回文字符串，如果是返回True，否則返回False

#         參數：
#             s：就是要檢查的字符串
#     '''
#     # 基線條件
#     if len(s) < 2 :
#         # 字符串的長度小於2，則字符串一定是回文
#         return True
#     # 遞歸條件    
#     return s[0] == s[-1] and hui_wen(s[1:-1])

print(hui_wen('abcdefgfedcba'))